{
  	"name": "swifttestfilegen",
	"displayName": "SwiftTestFileGen",
	"description": "Generates test files from Swift Package Manager target files",
	"version": "0.1.0",
	"author": "LuizZak",
	"publisher": "LuizZak",
	"license": "MIT",
	"icon": "icon.png",
	"engines": {
		"vscode": "^1.63.0"
	},
	"categories": [
		"Testing", "Other"
	],
	"activationEvents": [
		"workspaceContains:Package.swift",
		"onLanguage:swift"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/LuizZak/SwiftTestFileGen.git"
	},
	"keywords": [
		"swift",
		"test",
		"testing",
		"unit test"
	],
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "swifttestfilegen.generateTestFiles",
				"title": "SwiftTestFileGen: Generate Test File(s)...",
				"shortTitle": "Generate Test File(s)..."
			},
			{
				"command": "swifttestfilegen.gotoTestFile",
				"title": "SwiftTestFileGen: Go to Test File...",
				"shortTitle": "Go to Test File..."
			}
		],
		"menus": {
			"explorer/context": [
				{
					"command": "swifttestfilegen.generateTestFiles",
					"when": "resourceExtname == .swift || explorerResourceIsFolder"
				}
			]
		},
		"configuration": {
			"title": "SwiftTestFileGen",
			"properties": {
				"swiftTestFileGen.gotoTestFile.useFilenameHeuristics": {
					"type": "boolean",
					"default": "false",
					"description": "Whether to use simple <FileName>.swift -> <FileName><Suffix>.swift heuristics to find test files, instead of querying through the package manifest for paths. If enabled, it might increase the speed of file switching at the cost of accuracy on projects with multiple Package.swift manifests."
				},
				"swiftTestFileGen.gotoTestFile.heuristicFilenamePattern": {
					"type": ["array", "string"],
					"default": "(\\w+)Tests",
					"description": "A regex pattern string or array of regex pattern strings with exactly one capture group to use to convert file names to test file names, if useFilenameHeuristics is enabled. Pattern is applied to filenames, excluding file extension. The capture group of the pattern(s) is used to insert the source file to derive the test file name out of, and is matched against all .swift files in the workspace. Matching is case-sensitive."
				},
				"swiftTestFileGen.fileGen.confirmation": {
					"type": "string",
					"default": "always",
					"enum": [
						"always",
						"onlyIfMultiFile",
						"onlyOnDirectories",
						"never"
					],
					"enumDescriptions": [
						"Always requests confirmation of changes through a Refactor Preview window",
						"Only requests confirmation if more than one file is selected, or if the selected item is a directory",
						"Only requests confirmation if the selection contains one or more directories",
						"Never requests confirmation; always create test files straight away"
					],
					"description": "Whether to request confirmation of changes through a Refactor Preview window while creating files, or apply changes immediately after invoking the file generation command."
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"lint": "eslint src --ext ts",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/vscode": "^1.63.0",
		"@types/glob": "^7.2.0",
		"@types/mocha": "^9.0.0",
		"@types/node": "14.x",
		"@typescript-eslint/eslint-plugin": "^5.9.1",
		"@typescript-eslint/parser": "^5.9.1",
		"eslint": "^8.6.0",
		"glob": "^7.2.0",
		"minimatch": "3.0.4",
		"mocha": "^9.1.3",
		"typescript": "^4.5.4",
		"@vscode/test-electron": "^2.0.3"
	}
}
