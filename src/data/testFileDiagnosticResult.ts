import path = require('path');
import * as vscode from 'vscode';

/**
 * Represents a diagnostics generated by proposeTestFiles.
 */
export interface TestFileDiagnosticResult {
    /** Diagnostic message. */
    message: string;

    /** File path that triggered diagnostic message, if any. */
    sourceFile?: vscode.Uri;

    /** Identifier for diagnostic kind. */
    kind: TestFileDiagnosticKind
}

export enum TestFileDiagnosticKind {
    fileNotInSourcesFolder,
    packageManifestNotFound
};

export function emitDiagnostics(diagnostics: TestFileDiagnosticResult[]) {
    function showDiagnosticsForFiles(message: string, files: vscode.Uri[], severity: vscode.DiagnosticSeverity = vscode.DiagnosticSeverity.Warning) {
        const filePaths = files.map((file) => {
            return path.basename(file.fsPath);
        });

        const truncateListAt = 2;

        const filePathTruncatedList = filePaths.slice(0, truncateListAt).join("\n");
        
        let filePathList = filePathTruncatedList;
        const truncated = filePaths.length - truncateListAt;
        if (truncated > 0) {
            filePathList = filePathList.concat(`\n...and ${truncated} more`);
        }

        switch (severity) {
        case vscode.DiagnosticSeverity.Warning:
            vscode.window.showWarningMessage(
                `${message}\n${filePathList}`,
            );

        case vscode.DiagnosticSeverity.Error:
            vscode.window.showErrorMessage(
                `${message}\n${filePathList}`,
            );

        default:
            vscode.window.showInformationMessage(
                `${message}\n${filePathList}`,
            );
        }
    }

    function showDiagnosticsForKind(message: string, kind: TestFileDiagnosticKind, severity: vscode.DiagnosticSeverity = vscode.DiagnosticSeverity.Warning) {
        const filtered = diagnostics.filter(diagnostic => diagnostic.kind === kind);
        diagnostics = diagnostics.filter(diagnostic => diagnostic.kind !== kind);

        const filePaths = filtered.flatMap((file) => {
            if (file.sourceFile) {
                return [file.sourceFile];
            }

            return [];
        });

        showDiagnosticsForFiles(
            message,
            filePaths,
            severity
        );
    }

    showDiagnosticsForKind(
        `One or more files where not contained within a recognized Sources/ folder:`,
        TestFileDiagnosticKind.fileNotInSourcesFolder,
        vscode.DiagnosticSeverity.Warning
    );

    // Show remaining diagnostics
    for (const diagnostic of diagnostics) {
        vscode.window.showErrorMessage(diagnostic.message);
    }
}
